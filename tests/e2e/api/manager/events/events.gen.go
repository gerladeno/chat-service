// Package apimanagerevents provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package apimanagerevents

import (
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gerladeno/chat-service/internal/types"
)

// Event defines model for Event.
type Event struct {
	EventId   types.EventID   `json:"eventId"`
	EventType string          `json:"eventType"`
	RequestId types.RequestID `json:"requestId"`
	union     json.RawMessage
}

// Message defines model for Message.
type Message struct {
	AuthorId  types.UserID    `json:"authorId"`
	Body      string          `json:"body"`
	ChatId    types.ChatID    `json:"chatId"`
	CreatedAt time.Time       `json:"createdAt"`
	MessageId types.MessageID `json:"messageId"`
}

// MessageId defines model for MessageId.
type MessageId struct {
	MessageId types.MessageID `json:"messageId"`
}

// MessageSentEvent defines model for MessageSentEvent.
type MessageSentEvent = MessageId

// NewChatEvent defines model for NewChatEvent.
type NewChatEvent struct {
	CanTakeMoreProblems bool         `json:"canTakeMoreProblems"`
	ChatId              types.ChatID `json:"chatId"`
	ClientId            types.UserID `json:"clientId"`
}

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent = Message

// AsNewMessageEvent returns the union data inside the Event as a NewMessageEvent
func (t Event) AsNewMessageEvent() (NewMessageEvent, error) {
	var body NewMessageEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewMessageEvent overwrites any union data inside the Event as the provided NewMessageEvent
func (t *Event) FromNewMessageEvent(v NewMessageEvent) error {
	t.EventType = "NewMessageEvent"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewMessageEvent performs a merge with any union data inside the Event, using the provided NewMessageEvent
func (t *Event) MergeNewMessageEvent(v NewMessageEvent) error {
	t.EventType = "NewMessageEvent"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsMessageSentEvent returns the union data inside the Event as a MessageSentEvent
func (t Event) AsMessageSentEvent() (MessageSentEvent, error) {
	var body MessageSentEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageSentEvent overwrites any union data inside the Event as the provided MessageSentEvent
func (t *Event) FromMessageSentEvent(v MessageSentEvent) error {
	t.EventType = "MessageSentEvent"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageSentEvent performs a merge with any union data inside the Event, using the provided MessageSentEvent
func (t *Event) MergeMessageSentEvent(v MessageSentEvent) error {
	t.EventType = "MessageSentEvent"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsNewChatEvent returns the union data inside the Event as a NewChatEvent
func (t Event) AsNewChatEvent() (NewChatEvent, error) {
	var body NewChatEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewChatEvent overwrites any union data inside the Event as the provided NewChatEvent
func (t *Event) FromNewChatEvent(v NewChatEvent) error {
	t.EventType = "NewChatEvent"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewChatEvent performs a merge with any union data inside the Event, using the provided NewChatEvent
func (t *Event) MergeNewChatEvent(v NewChatEvent) error {
	t.EventType = "NewChatEvent"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Event) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"eventType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Event) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "MessageSentEvent":
		return t.AsMessageSentEvent()
	case "NewChatEvent":
		return t.AsNewChatEvent()
	case "NewMessageEvent":
		return t.AsNewMessageEvent()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Event) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["eventId"], err = json.Marshal(t.EventId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventId': %w", err)
	}

	object["eventType"], err = json.Marshal(t.EventType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventType': %w", err)
	}

	object["requestId"], err = json.Marshal(t.RequestId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'requestId': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *Event) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["eventId"]; found {
		err = json.Unmarshal(raw, &t.EventId)
		if err != nil {
			return fmt.Errorf("error reading 'eventId': %w", err)
		}
	}

	if raw, found := object["eventType"]; found {
		err = json.Unmarshal(raw, &t.EventType)
		if err != nil {
			return fmt.Errorf("error reading 'eventType': %w", err)
		}
	}

	if raw, found := object["requestId"]; found {
		err = json.Unmarshal(raw, &t.RequestId)
		if err != nil {
			return fmt.Errorf("error reading 'requestId': %w", err)
		}
	}

	return err
}
