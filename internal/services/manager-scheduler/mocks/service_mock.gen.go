// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package managerschedulermocks is a generated GoMock package.
package managerschedulermocks

import (
	context "context"
	reflect "reflect"
	time "time"

	messagesrepo "github.com/gerladeno/chat-service/internal/repositories/messages"
	problems "github.com/gerladeno/chat-service/internal/repositories/problems"
	types "github.com/gerladeno/chat-service/internal/types"
	gomock "github.com/golang/mock/gomock"
)

// MockproblemsRepo is a mock of problemsRepo interface.
type MockproblemsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockproblemsRepoMockRecorder
}

// MockproblemsRepoMockRecorder is the mock recorder for MockproblemsRepo.
type MockproblemsRepoMockRecorder struct {
	mock *MockproblemsRepo
}

// NewMockproblemsRepo creates a new mock instance.
func NewMockproblemsRepo(ctrl *gomock.Controller) *MockproblemsRepo {
	mock := &MockproblemsRepo{ctrl: ctrl}
	mock.recorder = &MockproblemsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproblemsRepo) EXPECT() *MockproblemsRepoMockRecorder {
	return m.recorder
}

// AssignManager mocks base method.
func (m *MockproblemsRepo) AssignManager(ctx context.Context, problemID types.ProblemID, managerID types.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignManager", ctx, problemID, managerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignManager indicates an expected call of AssignManager.
func (mr *MockproblemsRepoMockRecorder) AssignManager(ctx, problemID, managerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignManager", reflect.TypeOf((*MockproblemsRepo)(nil).AssignManager), ctx, problemID, managerID)
}

// GetProblemsWithoutManager mocks base method.
func (m *MockproblemsRepo) GetProblemsWithoutManager(ctx context.Context) ([]problems.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemsWithoutManager", ctx)
	ret0, _ := ret[0].([]problems.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemsWithoutManager indicates an expected call of GetProblemsWithoutManager.
func (mr *MockproblemsRepoMockRecorder) GetProblemsWithoutManager(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemsWithoutManager", reflect.TypeOf((*MockproblemsRepo)(nil).GetProblemsWithoutManager), ctx)
}

// GetRequestID mocks base method.
func (m *MockproblemsRepo) GetRequestID(ctx context.Context, problemID types.ProblemID) (types.RequestID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestID", ctx, problemID)
	ret0, _ := ret[0].(types.RequestID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestID indicates an expected call of GetRequestID.
func (mr *MockproblemsRepoMockRecorder) GetRequestID(ctx, problemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestID", reflect.TypeOf((*MockproblemsRepo)(nil).GetRequestID), ctx, problemID)
}

// Mocktransactor is a mock of transactor interface.
type Mocktransactor struct {
	ctrl     *gomock.Controller
	recorder *MocktransactorMockRecorder
}

// MocktransactorMockRecorder is the mock recorder for Mocktransactor.
type MocktransactorMockRecorder struct {
	mock *Mocktransactor
}

// NewMocktransactor creates a new mock instance.
func NewMocktransactor(ctrl *gomock.Controller) *Mocktransactor {
	mock := &Mocktransactor{ctrl: ctrl}
	mock.recorder = &MocktransactorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktransactor) EXPECT() *MocktransactorMockRecorder {
	return m.recorder
}

// RunInTx mocks base method.
func (m *Mocktransactor) RunInTx(ctx context.Context, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInTx", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunInTx indicates an expected call of RunInTx.
func (mr *MocktransactorMockRecorder) RunInTx(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTx", reflect.TypeOf((*Mocktransactor)(nil).RunInTx), ctx, f)
}

// MockmsgRepo is a mock of msgRepo interface.
type MockmsgRepo struct {
	ctrl     *gomock.Controller
	recorder *MockmsgRepoMockRecorder
}

// MockmsgRepoMockRecorder is the mock recorder for MockmsgRepo.
type MockmsgRepoMockRecorder struct {
	mock *MockmsgRepo
}

// NewMockmsgRepo creates a new mock instance.
func NewMockmsgRepo(ctrl *gomock.Controller) *MockmsgRepo {
	mock := &MockmsgRepo{ctrl: ctrl}
	mock.recorder = &MockmsgRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmsgRepo) EXPECT() *MockmsgRepoMockRecorder {
	return m.recorder
}

// CreateService mocks base method.
func (m *MockmsgRepo) CreateService(ctx context.Context, reqID types.RequestID, problemID types.ProblemID, chatID types.ChatID, msgBody string) (*messagesrepo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", ctx, reqID, problemID, chatID, msgBody)
	ret0, _ := ret[0].(*messagesrepo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockmsgRepoMockRecorder) CreateService(ctx, reqID, problemID, chatID, msgBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockmsgRepo)(nil).CreateService), ctx, reqID, problemID, chatID, msgBody)
}

// Mockoutbox is a mock of outbox interface.
type Mockoutbox struct {
	ctrl     *gomock.Controller
	recorder *MockoutboxMockRecorder
}

// MockoutboxMockRecorder is the mock recorder for Mockoutbox.
type MockoutboxMockRecorder struct {
	mock *Mockoutbox
}

// NewMockoutbox creates a new mock instance.
func NewMockoutbox(ctrl *gomock.Controller) *Mockoutbox {
	mock := &Mockoutbox{ctrl: ctrl}
	mock.recorder = &MockoutboxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockoutbox) EXPECT() *MockoutboxMockRecorder {
	return m.recorder
}

// Put mocks base method.
func (m *Mockoutbox) Put(ctx context.Context, name, payload string, availableAt time.Time) (types.JobID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, name, payload, availableAt)
	ret0, _ := ret[0].(types.JobID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockoutboxMockRecorder) Put(ctx, name, payload, availableAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*Mockoutbox)(nil).Put), ctx, name, payload, availableAt)
}
