// Package clientevents provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package clientevents

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gerladeno/chat-service/internal/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// Event defines model for Event.
type Event struct {
	union json.RawMessage
}

// MessageEventSent defines model for MessageEventSent.
type MessageEventSent struct {
	EventId   types.EventID   `json:"eventId"`
	EventType string          `json:"eventType"`
	MessageId types.MessageID `json:"messageId"`
	RequestId types.RequestID `json:"requestId"`
}

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	AuthorId  *types.UserID   `json:"authorId,omitempty"`
	Body      string          `json:"body"`
	CreatedAt time.Time       `json:"createdAt"`
	EventId   types.EventID   `json:"eventId"`
	EventType string          `json:"eventType"`
	IsService bool            `json:"isService"`
	MessageId types.MessageID `json:"messageId"`
	RequestId types.RequestID `json:"requestId"`
}

// AsNewMessageEvent returns the union data inside the Event as a NewMessageEvent
func (t Event) AsNewMessageEvent() (NewMessageEvent, error) {
	var body NewMessageEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewMessageEvent overwrites any union data inside the Event as the provided NewMessageEvent
func (t *Event) FromNewMessageEvent(v NewMessageEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewMessageEvent performs a merge with any union data inside the Event, using the provided NewMessageEvent
func (t *Event) MergeNewMessageEvent(v NewMessageEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsMessageEventSent returns the union data inside the Event as a MessageEventSent
func (t Event) AsMessageEventSent() (MessageEventSent, error) {
	var body MessageEventSent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageEventSent overwrites any union data inside the Event as the provided MessageEventSent
func (t *Event) FromMessageEventSent(v MessageEventSent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageEventSent performs a merge with any union data inside the Event, using the provided MessageEventSent
func (t *Event) MergeMessageEventSent(v MessageEventSent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Event) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Event) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xVwW7UMBD9ldXA0VlvxaXyDbocegAkFk4VB28ym1g4HmNPslRR/h3ZCW3otkgUekDq",
	"KaPMvJk3M2/kAUpqPTl0HEENEMsGW53Ntz06TgY5/HAAdTXAy4AHUPBC3oLkjJDv8fgOY9Q1TsBR/D5+",
	"GbzLgC+jgJO/agAfyGNgg5kWJtdllcwDhVYzKOg6U4EAvvYICiIH42oQ8L2oqZh/pk9c57yX26WvMK2n",
	"MBXS3ICC2nDT7dcltbLGYHWFjmTZaC4iht6UKI1jDE5bmbPCOIqJ1qdca7hDZBTQTm09lvY8lSchHvBb",
	"h/FPJvoP6t7X5MeZyPaGlglYgbq6WflyysuZLptIIrorxRMN6Y4bCo/dxueI4UlWsafq+l75lAE1Y/Wa",
	"fyFcacaCTYsnrH/q8X87ExN3E3Th3RNZ1O75iv72irK6lloSDxzW7RYePrKU3LgD5UUZtonAG+2+rnad",
	"T32tLhrNqwtr0PEqyymCgB5DNORAQX+W6JNHp70BBa/WZ+sNiDyLCMp11gpIfWOI+empMJbBeJ7gW+zR",
	"km9T9ikKBHTBgoJjVFJaKrVtKLI635xv5DGm1+VHAAAA//8qAExX7AYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
