# https://taskfile.dev
version: '3'

silent: true

vars:
  GO_MODULE: github.com/gerladeno/chat-service
  GO_FILES:
    sh: find . -type f -name '*.go' -not -path "./vendor/*" -not -path "./internal/store/*" -not -path "*.gen.go" | tr "\n" " "

  GOLANGCI_LINT_VERSION: v1.52.2
  GOLANGCI_LINT_CACHE:
    sh: echo "$HOME/misc/caches"

  DOCKER_COMPOSE_PATHS: |
    ./deploy/local/docker-compose.yml
    ./deploy/local/docker-compose.sentry.yml
    ./deploy/local/docker-compose.swagger-ui.yml
  DOCKER_COMPOSE_CMD:
    docker compose{{range $i, $line := .DOCKER_COMPOSE_PATHS | trim | splitLines}} -f "{{$line}}"{{end}}

  TYPES: |
    ChatID
    MessageID
    ProblemID
    UserID
    RequestID
    JobID
    FailedJobID
  TYPES_PKG: types
  TYPES_DST: ./internal/types/types.gen.go

  DEV_TOOLS: |
    github.com/daixiang0/gci@v0.8.0
    mvdan.cc/gofumpt@v0.4.0
    github.com/kazhuravlev/options-gen/cmd/options-gen@v0.28.4
    entgo.io/ent/cmd/ent@v0.11.10
    github.com/deepmap/oapi-codegen/cmd/oapi-codegen@latest
    github.com/golang/mock/mockgen@v1.6.0
    github.com/onsi/ginkgo/v2/ginkgo@v2.9.2

  ENT_SCHEMA: ./internal/store/schema

  CLIENT_V1_SRC: ./api/client.v1.swagger.yml
  CLIENT_V1_DST: ./internal/server-client/v1/server.gen.go
  CLIENT_V1_PKG: clientv1

  MANAGER_V1_SRC: ./api/manager.v1.swagger.yml
  MANAGER_V1_DST: ./internal/server-manager/v1/server.gen.go
  MANAGER_V1_PKG: managerv1

  E2E_CLIENT_V1_DST: ./tests/e2e/api/client/v1/client.gen.go
  E2E_CLIENT_V1_PKG: apiclientv1

tasks:
  default:
    cmds:
      - task: gen
      - task: tidy
      - task: fmt
      - task: lint
      - task: tests
      - task: build

  tidy:
    - echo "- Tidy"
    - go mod tidy
    - task: vendor

  vendor:
    - echo "- Vendor"
    - go mod vendor

  fmt:
    - echo "- Format"
    - gofumpt -w {{.GO_FILES}}
    - gci write --custom-order -s standard -s default -s "prefix({{.GO_MODULE}})" {{.GO_FILES}}

  lint:
    cmds:
      - echo "- Lint"
      - mkdir -p {{.GOLANGCI_LINT_CACHE}}
      - task: lint:cmd
        vars: { CLI_ARGS: "run --fix --timeout=5m ./..." }

  lint:cmd:
    cmds:
      - |
        docker run --rm \
          -v "$(pwd):/app" -w /app \
          -v "{{.GOLANGCI_LINT_CACHE}}:/root/.cache" \
          golangci/golangci-lint:{{.GOLANGCI_LINT_VERSION}} \
          git config --global --add safe.directory . & golangci-lint {{.CLI_ARGS}}

  tests:
    cmds:
      - echo "- Tests"
      - go test -race ./...

  build:
    cmds:
      - echo "- Build"
      - go build ./cmd/chat-service

  dev-tools:install:
    cmds:
      - echo "- Install dev tools"
      - |
        {{range $i, $line := .DEV_TOOLS | trim | splitLines}}
        go install "{{$line}}"
        {{end}}

  gen:
    - echo "Run go generate..."
    - go generate ./...
    - task: gen:types
    - task: ent:gen
    - task: gen:api
    - task: gen:e2e

  gen:types:
    cmds:
      - echo "Generate types..."
      - go run ./cmd/gen-types types {{range $i, $line := .TYPES | trim | splitLines}}{{$line}},{{end}} internal/types/types.gen.go

  ent:new:
    cmds:
      - go run -mod=mod entgo.io/ent/cmd/ent new --target ./internal/store/schema {{$.CLI_ARGS}}
      - task: tidy

  ent:gen:
    cmds:
      - go run -mod=mod entgo.io/ent/cmd/ent generate --feature sql/upsert --feature sql/lock --target ./internal/store --template ./internal/store/templates/ ./internal/store/schema
      - task: tidy

  gen:api:
    cmds:
      - oapi-codegen -old-config-style -package {{ .CLIENT_V1_PKG }} {{ $.CLIENT_V1_SRC }} > {{ $.CLIENT_V1_DST }}
      - oapi-codegen -old-config-style -package {{ .MANAGER_V1_PKG }} {{ $.MANAGER_V1_SRC }} > {{ $.MANAGER_V1_DST }}

  gen:e2e:
    cmds:
      - echo "[E2E] Generate client API..."
      - oapi-codegen --old-config-style -generate types,client -package {{.E2E_CLIENT_V1_PKG}} {{.CLIENT_V1_SRC}} > {{.E2E_CLIENT_V1_DST}}

  deps:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} up -d"

  deps:cmd:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} {{$.CLI_ARGS}}"

  deps:status:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} ps"

  deps:logs:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} logs {{$.CLI_ARGS}}"

  deps:stop:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} stop"

  deps:reset-psql:
    cmds:
      - task: deps:reset
        vars:
          SERVICE: postgres

  deps:reset:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} rm -fsv {{.SERVICE}}"
      - "{{.DOCKER_COMPOSE_CMD}} up -d {{.SERVICE}}"

  ui:
    cmds:
      - cd ./cmd/ui-client && go run ./main.go

  mui:
    cmds:
      - cd ./cmd/ui-manager && go run ./main.go

  uis:
    cmds:
      - (echo 'task ui'; echo 'task mui') | parallel

  tests:integration:
    env:
      TEST_PSQL_USER: chat-service
      TEST_PSQL_PASSWORD: chat-service
      TEST_PSQL_DEBUG: true
      TEST_LOG_LEVEL: info
      TEST_KEYCLOAK_REALM: Bank
      TEST_KEYCLOAK_CLIENT_ID: integration-testing
      TEST_KEYCLOAK_CLIENT_SECRET: EI18Y59XvGCUK3rkuyPBcVM85deMPlv2
      TEST_KEYCLOAK_TEST_USER: integration-testing
      TEST_KEYCLOAK_TEST_PASSWORD: integration-testing
    cmds:
      - echo "- Integration tests"
      - go test -tags integration -count 1 -race ./...

  kc:export:
    cmds:
      - |
        docker exec -it local-keycloak-1 bash -c "/opt/keycloak/bin/kc.sh export --dir /opt/keycloak/data/import --users realm_file"

  tests:e2e:
    env:
      E2E_CLIENT_V1_API_ENDPOINT: http://localhost:8080/v1
      E2E_KEYCLOAK_BASE_PATH: http://localhost:3010
      E2E_KEYCLOAK_REALM: Bank
      E2E_KEYCLOAK_CLIENT_ID: e2e-testing
      E2E_KEYCLOAK_CLIENT_SECRET: kOAz2cUJ9Kur3HNPOd5R3vwLhZL9TskT
      E2E_KEYCLOAK_CLIENT_DEBUG: false
      E2E_KEYCLOAK_CLIENTS: e2e_client_0,e2e_client_1
    cmds:
      - echo "- End-to-end tests..."
      # NOTE: It's important to run tests serial (without `-p` flag) â€“ for correct `clientsPool` sharing.
      - "ginkgo --fail-fast --timeout=1m --tags e2e {{.CLI_ARGS}} ./tests/e2e"